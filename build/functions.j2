{#- This banner is for the the resulting file -#}
#####################################################################
# DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN #
#####################################################################

# All private functions (start with _) come from here
source /usr/local/bin/common.sh


function run_command() {
  if [[ "$#" -lt 1 ]]; then
    echo "Improper use of the easy_infra run_command function; $# arguments provided when at least 1 was expected"
    return 230
  fi

  function_name="${1}"
  shift
  function_arguments=("${@}")

  if [[ "${function_name}" =~ ^scan_.* ]]; then
    # Special case to handle our "scan_" functions
    return
  fi

  command "${function_name}" "${function_arguments[@]}"
}


function process_command_exit_status() {
  # Store the provided exit status to return it at the end
  exit_status="${1}"
  command="${2}"
  description="${3}"

  if [[ "${exit_status}" != 0 ]]; then
    _feedback ERROR "Failed ${command} ${description}"
  else
    _feedback INFO "Passed ${command} ${description}"
  fi

  # If the shell is not interactive ("i" is not in the $- variable), skip multiple runs of the provided command by timestamping the touch file
  if [[ ! "${-}" =~ .*i.* ]]; then
    # If there are any spaces in the provided command, replace them with _s
    date +%s > "/tmp/${command// /_}_complete"
  fi

  return "${exit_status}"
}

{# Macro to be used by the loops below #}
{%- macro function(function, package=function, scan=false) %}

{%- set file_extensions = packages[package]["file_extensions"] -%}
{%- set security_tools = packages[package]["security"] -%}
{%- set allow_filter = packages[package]["allow_filter"] -%}
{%- set version_argument = packages[package]["version_argument"] -%}
{%- set validations = packages[package]["validation"] -%}

function {{ "scan_" ~ function if scan else function }}() {
  arguments=("${@}")
  easy_infra_{{ function | replace("-", "_") }}_security_tools=({% for security_tool in security_tools %}{{ security_tool | replace("-", "_") }}{% if not loop.last %} {% endif %}{% endfor %})

  # If an argument was provided which adjusts the easy_infra runtime, set a related variable and remove that argument from the arguments array
  for i in "${!arguments[@]}"; do
    if [[ "${arguments[i],,}" == "--disable-security" ]]; then
      unset 'arguments[i]'
      security_skipped="argument"
    fi

    for security_tool in "${easy_infra_{{ function | replace("-", "_") }}_security_tools[@]}"; do
      if [[ "${arguments[i],,}" == "--skip-${security_tool}" ]]; then
        unset 'arguments[i]'
        declare "${security_tool}_skipped=argument"
      fi
    done
  done

{% if scan %}
  if [[ "${1}" == "version" ]]; then
    _feedback INFO "Detected version check, skipping security checks for scan_{{ function }}"
    echo "{{ function }} is using the following security tools:"
    for security_tool in "${easy_infra_{{ function | replace("-", "_") }}_security_tools[@]}"; do
      security_tool_version_variable="${security_tool^^}_VERSION"
      echo "${security_tool} version ${!security_tool_version_variable}"
    done
    return
{%- else %}
  if [[ "${1}" == "{{ version_argument }}" ]]; then
    _feedback INFO "Detected version check, skipping security checks for {{ function }}{% for filter in allow_filter if allow_filter is defined %} {{ filter['match'] }}{% endfor %}"
    # Allow piping of the version command into other commands
    run_command "${FUNCNAME[0]}" "${arguments[@]}"
    return $?
{%- endif %}
  fi

{% if allow_filter is defined %}
  # Apply the allow filters after easy_infra specific arguments have been removed
  for i in "${!arguments[@]}"; do
{%- for filter in allow_filter %}
    if [[ "${i}" == "{{ filter['position'] }}" && "${arguments[i]}" == "{{ filter['match'] }}" ]]; then
      hit="true"
    fi
{%- endfor %}

    if [[ "${hit:-false}" == "false" ]]; then
      # Run the command and return
      run_command "${FUNCNAME[0]}" "${arguments[@]}"
      return $?
    fi
  done
{%- endif %}

  easy_infra_{{ function | replace("-", "_") }}_hooks=()
  if [[ "${DISABLE_HOOKS:-false}" != "true" ]]; then
    # Dynamically register hooks
    for file in /opt/hooks/bin/*.sh; do
      command=$(awk -F\: '/register_hook/ { gsub(/ /,""); print $2 }' "${file}")
      if [[ "${command}" == "{{ function }}" ]]; then
        easy_infra_{{ function | replace("-", "_") }}_hooks+=("${file}")
      fi
    done
  fi

  # Methods to skip **all** security tools for {{ function }}{% for filter in allow_filter if allow_filter is defined %} {{ filter['match'] }}{% endfor %}
  DISABLE_SECURITY="${DISABLE_SECURITY:-false}"
  dirs=()
  if [[ "${AUTODETECT:-false}" == "true" ]]; then
{%- if file_extensions is defined %}
{%- for file_extension in file_extensions %}
    files=$(find . -iname "*.{{ file_extension }}" -type f)
    if [[ "${files}" ]]; then
      dirs+=($(for file in ${files}; do dirname ${file}; done | sort -u | xargs readlink --canonicalize))
    fi
{%- endfor %}
{%- else %}
    dir=$(pwd -P)
    _feedback WARNING "AUTODETECT enabled, but {{ function }}{% for filter in allow_filter if allow_filter is defined %} {{ filter['match'] }}{% endfor %} does not have any file extensions configured to search for; falling back to running in ${dir}"
    _log "easy_infra.stdouterr" info unknown "{{ function }}" "${dir}" string "Failed to properly autodetect the directories to scan when running a {{ function }}{% for filter in allow_filter if allow_filter is defined %} {{ filter['match'] }}{% endfor %} command"
    dirs+=("${dir}")
{%- endif %}
  else
    dirs+=($(pwd -P))
  fi

  declare -A dir_exit_codes

  for dir in "${dirs[@]}"; do
    _feedback INFO "Changing into the ${dir} directory..."
    pushd "${dir}" > /dev/null

    # Export variables to be used in the hooks
    export dir

    # Process the registered hooks
    if [[ "${DISABLE_HOOKS:-false}" == "true" ]]; then
      _feedback WARNING "DISABLE_HOOKS is set to ${DISABLE_HOOKS}; skipping all hooks for the {{ function }}{% for filter in allow_filter if allow_filter is defined %} {{ filter['match'] }}{% endfor %} command..."
      _log "easy_infra.stdouterr" info unknown "{{ function }}" "${dir}" string "The DISABLE_HOOKS environment variable is set to ${DISABLE_HOOKS}, skipping all hooks for the {{ function }}{% for filter in allow_filter if allow_filter is defined %} {{ filter['match'] }}{% endfor %} command"
    else
      for hook in ${easy_infra_{{ function | replace("-", "_") }}_hooks[@]}; do
        bash "${hook}"
        return=$?
        if [[ "${return:-1}" != 0 ]]; then
          popd > /dev/null
          if [[ "${FAIL_FAST:-false}" == "true" ]]; then
            _feedback INFO "FAIL_FAST is set to ${FAIL_FAST}; returning the exit code of ${return} immediately"
            return "${return}"
          else
            dir_exit_codes["${dir}"]="${return}"
            continue
          fi
        fi
      done
    fi

    if [[ "${security_skipped:-false}" == "argument" ]]; then
      _feedback WARNING "Skipping all security checks for {{ function }}{% for filter in allow_filter if allow_filter is defined %} {{ filter['match'] }}{% endfor %} due to the --disable-security argument"
      _log "easy_infra.stdouterr" info unknown "{{ function }}" "${dir}" string "All security checks for {{ function }}{% for filter in allow_filter if allow_filter is defined %} {{ filter['match'] }}{% endfor %} were skipped due to the --disable-security argument"
      unset 'security_skipped'
      run_command "${FUNCNAME[0]}" "${arguments[@]}"
      return=$?
      popd > /dev/null
      if [[ "${return:-1}" != 0 ]]; then
        if [[ "${FAIL_FAST:-false}" == "true" ]]; then
          _feedback INFO "FAIL_FAST is set to ${FAIL_FAST}; returning the exit code of ${return} immediately"
          return "${return}"
        else
          dir_exit_codes["${dir}"]="${return}"
          continue
        fi
      fi
      continue
    elif [[ "${DISABLE_SECURITY,,}" == "true" ]]; then
      _feedback WARNING "Skipping all security checks for {{ function }}{% for filter in allow_filter if allow_filter is defined %} {{ filter['match'] }}{% endfor %} due to the DISABLE_SECURITY environment variable value"
      _log "easy_infra.stdouterr" info unknown "{{ function }}" "${dir}" string "All security checks for {{ function }}{% for filter in allow_filter if allow_filter is defined %} {{ filter['match'] }}{% endfor %} were skipped due to the DISABLE_SECURITY environment variable value"
      run_command "${FUNCNAME[0]}" "${arguments[@]}"
      return=$?
      popd > /dev/null
      if [[ "${return:-1}" != 0 ]]; then
        if [[ "${FAIL_FAST:-false}" == "true" ]]; then
          _feedback INFO "FAIL_FAST is set to ${FAIL_FAST}; returning the exit code of ${return} immediately"
          return "${return}"
        else
          dir_exit_codes["${dir}"]="${return}"
          continue
        fi
      fi
      continue
    fi

  {%- if validations is defined %}
    ## Validate the input prior to running security tooling
    {%- for validation in validations %}
    # If the initialization was already run successfully in a non-interactive shell with AUTODETECT not set to true, don't run it again
    if [[ -r "/tmp/{{ validation.command | replace(" ", "_") }}_complete" && "${AUTODETECT:-false}" != "true" ]]; then
      _feedback INFO "Skipping \`{{ validation.command }}\` because it was already run on $(date -d @"$(cat /tmp/{{ validation.command | replace(" ", "_") }}_complete)")"
    else
      command {{ validation.command }} &>/tmp/{{ validation.command | replace(" ", "_") }}_stdouterr
      process_command_exit_status "$?" "{{ validation.command }}" "{{ validation.description }}"
      return=$?
      if [[ "${return:-1}" != 0 ]]; then
        cat /tmp/{{ validation.command | replace(" ", "_") }}_stdouterr
        if [[ "${LEARNING_MODE,,}" != "true" ]]; then
          popd > /dev/null
          if [[ "${FAIL_FAST:-false}" == "true" ]]; then
            _feedback INFO "FAIL_FAST is set to ${FAIL_FAST}; returning the exit code of ${return} immediately"
            return "${return}"
          else
            dir_exit_codes["${dir}"]="${return}"
            continue
          fi
        else
          _feedback DEBUGGING "Learning mode enabled, not returning {{ validation.command }}'s exit code of ${return}"
        fi
      fi
    fi
    {%- endfor -%}
  {%- endif %}

    ## Setup the per-tool security integrations
    {#- For each command being wrapped, loop through each security tool and apply tool-specific skips based on env vars/arguments #}
    {%- for security_tool in security_tools %}
    {{ security_tool | replace("-", "_") }}_skip_argument="--skip-{{ security_tool | replace("-", "_") }}"
    {{ security_tool | replace("-", "_") }}_upper=$(echo "{{ security_tool | replace("-", "_") }}" | tr '[:lower:]' '[:upper:]')
    {{ security_tool | replace("-", "_") }}_skip_env_var="SKIP_{{ '${' }}{{ security_tool | replace("-", "_") }}_upper}"
    declare "SKIP_{{ '${' }}{{ security_tool | replace("-", "_") }}_upper}={{ '${' }}!{{ security_tool | replace("-", "_") }}_skip_env_var:-false}"

    ## Methods to skip {{ security_tool | replace("-", "_") }}
    if [[ "{{ '${' }}{{ security_tool | replace("-", "_") }}_skipped:-false}" == "argument" ]]; then
      _feedback WARNING "Skipping {{ security_tool }} due to {{ '${' }}{{ security_tool | replace("-", "_") }}_skip_argument}"
      _log "easy_infra.stdouterr" info unknown "{{ security_tool }}-skipped" "${dir}" string "Skipping {{ security_tool }} due to {{ '${' }}{{ security_tool | replace("-", "_") }}_skip_argument}"
      unset '{{ security_tool | replace("-", "_") }}_skipped'
    # If the "skip" environment variable was set to true, skip the security scan
    elif [[ "${!{{ security_tool | replace("-", "_") }}_skip_env_var,,}" == "true" ]]; then
      _feedback WARNING "Skipping {{ security_tool }} due to the {{ '${' }}{{ security_tool | replace("-", "_") }}_skip_env_var} environment variable value"
      _log "easy_infra.stdouterr" info unknown "{{ security_tool }}-skipped" "${dir}" string "Skipping {{ security_tool }} due to the {{ '${' }}{{ security_tool | replace("-", "_") }}_skip_env_var} environment variable value"
    # If the security scan was already run successfully in a non-interactive shell with AUTODETECT not set to true, don't run it again
    elif [[ -r "/tmp/{{ security_tool | replace("-", "_") }}_complete" && "${AUTODETECT:-false}" != "true" ]]; then
      _feedback INFO "Skipping {{ security_tool }} because it was already run on $(date -d @"$(cat /tmp/{{ security_tool | replace("-", "_") }}_complete)")"
      _log "easy_infra.stdouterr" info unknown "{{ security_tool }}-skipped" "${dir}" string "Skipping {{ security_tool }} because it was already run on $(date -d @"$(cat /tmp/{{ security_tool | replace("-", "_") }}_complete)")"
    # Otherwise, attempt to run the security tool
    else
      if [[ -x $(which {{ security_tool }}) ]]; then
        security_tool_command='{{ security_tools[security_tool].command }}'
        {%- if security_tools[security_tool]["customizations"] is defined %}
        {%- for env_var, argument in security_tools[security_tool]["customizations"].items() %}
        if [[ -v {{ env_var }} ]]; then
          addition=' {{ argument }} "{{ '${' }}{{ env_var }}{{ '}' }}"'
          security_tool_command+="${addition}"
          _feedback DEBUGGING "Adding '${addition}' to the {{ security_tool }} command"
        fi
        {%- endfor %}
        {%- endif %}
        _feedback DEBUGGING "Running '${security_tool_command} &>/tmp/{{ security_tool | replace("-", "_") }}_stdouterr'"
        eval "${security_tool_command} &>/tmp/{{ security_tool | replace("-", "_") }}_stdouterr"
        process_command_exit_status "$?" "{{ security_tool | replace("-", "_") }}" "{{ security_tools[security_tool].description }}"
        return=$?

        # Identify the best message content to log
        if [[ -v {{ security_tool | upper | replace("-", "_") }}_JSON_REPORT_PATH && -r "{{ '${' }}{{ security_tool | upper | replace("-", "_") }}{{ '_JSON_REPORT_PATH}' }}/{{ security_tool | replace("-", "_") }}.json" ]]; then
          message_file_path="{{ '${' }}{{ security_tool | upper | replace("-", "_") }}{{ '_JSON_REPORT_PATH}' }}/{{ security_tool | replace("-", "_") }}.json"
          message_type="json"
        else
          _feedback DEBUGGING "{{ security_tool | upper | replace("-", "_") }}{{ '_JSON_REPORT_PATH' }} was not set or {{ '\${' }}{{ security_tool | upper | replace("-", "_") }}{{ '_JSON_REPORT_PATH}' }}/{{ security_tool | replace("-", "_") }}.json is not readable; falling back to /tmp/{{ security_tool | replace("-", "_") }}_stdouterr"
          message_file_path="/tmp/{{ security_tool | replace("-", "_") }}_stdouterr"
          message_type="string"
        fi

        _feedback DEBUGGING "The message type was set to ${message_type:-null or unset}"

        # Identify the interpolated security tool command
        interpolated_security_tool_command="$(envsubst "$(printf '{{ '${' }}%s{{ '}' }} ' $(env | awk -F\= '{print $1}'))" < <(echo "${security_tool_command}"))"

        if [[ "${return:-1}" != 0 ]]; then
          cat /tmp/{{ security_tool | replace("-", "_") }}_stdouterr

          if [[ "${LEARNING_MODE,,}" != "true" ]]; then
            # easy_infra denied the command because the security tool failed
            _log "{{ security_tool }}.stdouterr" denied failure "${interpolated_security_tool_command}" "${dir}" "${message_type}" "${message_file_path}"
            _feedback DEBUGGING "{{ security_tool }} running from the ${dir} folder exited ${return}; learning mode was ${LEARNING_MODE:-null or unset}. Returning ${return}"
            popd > /dev/null
            if [[ "${FAIL_FAST:-false}" == "true" ]]; then
              _feedback INFO "FAIL_FAST is set to ${FAIL_FAST}; returning the exit code of ${return} immediately"
              return "${return}"
            else
              dir_exit_codes["${dir}"]="${return}"
              continue
            fi
          else
            # easy_infra allowed the command due to learning mode, but the security tool failed
            _log "{{ security_tool }}.stdouterr" allowed failure "${interpolated_security_tool_command}" "${dir}" "${message_type}" "${message_file_path}"
            _feedback DEBUGGING "{{ security_tool }} running from the ${dir} folder exited ${return}, but suppressing it due to learning mode"
          fi
        else
          # easy_infra allowed the command and the security tool succeeded
          _log "{{ security_tool }}.stdouterr" allowed success "${interpolated_security_tool_command}" "${dir}" "${message_type}" "${message_file_path}"
          _feedback DEBUGGING "{{ security_tool }} was run successfully from the ${dir} folder; specifically '${interpolated_security_tool_command}'"
        fi
      else
        # easy_infra skipped the security tool
        _log "{{ security_tool }}.stdouterr" info unknown "{{ security_tool }}" "${dir}" string "{{ security_tool }} was not run because it was either not in the path or is not executable"
        _feedback DEBUGGING "Did not run {{ security_tool }} because it was either not in the path or is not executable"
      fi
    fi
    {%- endfor %}

    # Run the command per a PATH lookup, after any easy_infra specific arguments are removed
    run_command "${FUNCNAME[0]}" "${arguments[@]}"
    return=$?
    if [[ "${return:-1}" != 0 ]]; then
      popd > /dev/null
      _feedback ERROR "${FUNCNAME[0]} ${arguments[@]} exited ${return} in ${dir}"
      if [[ "${FAIL_FAST:-false}" == "true" ]]; then
        _feedback INFO "FAIL_FAST is set to ${FAIL_FAST}; returning the exit code of ${return} immediately"
        return "${return}"
      else
        dir_exit_codes["${dir}"]="${return}"
        continue
      fi
    fi

    popd > /dev/null
  done

  ## Process the exit codes from each directory
  something_failed="false"

  for dir in "${!dir_exit_codes[@]}"; do
    if [[ "${dir_exit_codes[${dir}]}" -gt 0 ]]; then
      feedback_label="ERROR"
      something_failed="true"
      failure_exit_code="${dir_exit_codes[${dir}]}"
    else
      feedback_label="DEBUGGING"
    fi
    exit_code="${dir_exit_codes[${dir}]}"
    _feedback "${feedback_label}" "${dir} resulted in an exit code of ${exit_code}"
  done

  if [[ "${something_failed:-false}" == "true" ]]; then
    # Returns the last exit code encountered
    return "${failure_exit_code}"
  fi
}
{% endmacro %}

{# Loop through each of the provided packages, aliases, or tool names to be wrapped and generate a function for each -#}
{% for package in packages if packages[package]["security"] -%}
{% for alias in packages[package]["aliases"] -%}
{# Create the alias function -#}
{{ function(alias, package) }}
{# And then a scan alias function -#}
{{ function(alias, package, scan=true) }}
{% else %}
{# Create the package function -#}
{{ function(package) }}
{# And then a scan package function -#}
{{ function(package, scan=true) }}
{% endfor %}
{# Add in a function for any custom tool names -#}
{% if "tool" in packages[package] and "name" in packages[package]["tool"] -%}
{{ function(packages[package]["tool"]["name"], package, scan=true) }}
{% endif %}
{%- endfor -%}
