{#- This banner is for the the resulting file -#}
#####################################################################
# DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN #
#####################################################################

# Color code lookups
ERROR='\033[0;31m'
WARNING='\033[0;33m'
INFO='\033[0m'
DEFAULT='\033[0m'


function _feedback() {
  # Use the provided color code label
  color="${1}"
  case "${1}" in
    ERROR)
      # echo to stderr with the appropriate coloring, reset the color back to
      # the default when done
      >&2 echo -e "${!color}${1}:  ${2}${DEFAULT}" ;;
    WARNING)
      # echo to stderr with the appropriate coloring, reset the color back to
      # the default when done
      >&2 echo -e "${!color}${1}:  ${2}${DEFAULT}" ;;
    *)
      # echo to stdout with the appropriate coloring, reset the color back to
      # the default when done
      echo -e "${!color}${1}:  ${2}${DEFAULT}" ;;
  esac
}


function process_command_exit_status() {
  # Store the provided exit status to return it at the end
  exit_status="${1}"
  command="${2}"
  description="${3}"

  if [[ "${exit_status}" != 0 ]]; then
    _feedback ERROR "Failed ${command} ${description}"
  else
    _feedback INFO "Passed ${command} ${description}"
  fi

  # If the shell is not interactive ("i" is not in the $- variable), skip
  # multiple runs of the provided command by timestamping the touch file
  if [[ ! "${-}" =~ .*i.* ]]; then
    # If there are any spaces in the provided command, replace them with _s
    date +%s > "/tmp/${command// /_}_complete"
  fi

  return "${exit_status}"
}

{# Macro to be used by the loops below #}
{% macro function(function, tools, allow_filter, version_argument, validations, security_tools) %}
function {{ function }}() {
  arguments=("${@}")
  easy_infra_{{ function | replace("-", "_") }}_tools=({% for tool in tools %}{{ tool | replace("-", "_") }}{% if not loop.last %} {% endif %}{% endfor %})

  # If an argument was provided which adjusts the easy_infra runtime, set a
  # related variable and remove that argument from the arguments array
  for i in "${!arguments[@]}"; do
    if [[ "${arguments[i],,}" == "--disable-security" ]]; then
      unset 'arguments[i]'
      security_skipped="argument"
    fi

    for tool in "${easy_infra_{{ function | replace("-", "_") }}_tools[@]}"; do
      if [[ "${arguments[i],,}" == "--skip-${tool}" ]]; then
        unset 'arguments[i]'
        declare "${tool}_skipped=argument"
      fi
    done
  done

{% if allow_filter is defined %}
  # Apply the allow filters after easy_infra specific arguments have been
  # removed
  for i in "${!arguments[@]}"; do
{%- for filter in allow_filter %}
    if [[ "${i}" == "{{ filter['position'] }}" && "${arguments[i]}" == "{{ filter['match'] }}" ]]; then
      hit="true"
    fi
{%- endfor %}

    if [[ "${hit:-false}" == "false" ]]; then
      # Run the command and return
      command "${FUNCNAME[0]}" "${arguments[@]}"
      return $?
    fi
  done
{%- endif %}

  # Methods to skip **all** security tools for {{ function }}
  DISABLE_SECURITY="${DISABLE_SECURITY:-false}"

  if [[ "${1}" == "{{ version_argument }}" ]]; then
    _feedback INFO "Detected version check, skipping security checks for {{ function }}"
    # Allow piping of the version command into other commands
    command "${FUNCNAME[0]}" "${arguments[@]}"
    return $?
  elif [[ "${security_skipped:-false}" == "argument" ]]; then
    _feedback WARNING "Skipping all security checks for {{ function }} due to the --disable-security argument"
    unset 'security_skipped'
    command "${FUNCNAME[0]}" "${arguments[@]}"
    return $?
  elif [[ "${DISABLE_SECURITY,,}" == "true" ]]; then
    _feedback WARNING "Skipping all security checks for {{ function }} due to the DISABLE_SECURITY environment variable value"
    command "${FUNCNAME[0]}" "${arguments[@]}"
    return $?
{%- if validations is defined %}
  else
    ## Validate the input prior to running security tooling
    {%- for validation in validations %}
    # If the initialization was already run successfully in an non-interactive
    # shell, don't run it again
    if [[ -r "/tmp/{{ validation.command | replace(" ", "_") }}_complete" ]]; then
      _feedback INFO "Skipping \`{{ validation.command }}\` because it was already run on $(date -d @"$(cat /tmp/{{ validation.command | replace(" ", "_") }}_complete)")"
    else
      command {{ validation.command }} &>/tmp/{{ validation.command | replace(" ", "_") }}_output
      process_command_exit_status "${?}" "{{ validation.command }}" "{{ validation.description }}"
      return=${?}
      if [[ ${return:-1} != 0 ]]; then
        cat /tmp/{{ validation.command | replace(" ", "_") }}_output
        if [[ "${LEARNING_MODE,,}" != "true" ]]; then
          return "${return}"
        fi
      fi
    fi
    {%- endfor -%}
{%- endif %}
  fi

  ## Setup the per-tool security integrations
  {#- For each command being wrapped, loop through each security tool and apply tool-specific skips based on env vars/arguments #}
  {%- for tool in security_tools %}
  {{ tool | replace("-", "_") }}_skip_argument="--skip-{{ tool | replace("-", "_") }}"
  {{ tool | replace("-", "_") }}_upper=$(echo "{{ tool | replace("-", "_") }}" | tr '[:lower:]' '[:upper:]')
  {{ tool | replace("-", "_") }}_skip_env_var="SKIP_{{ '${' }}{{ tool | replace("-", "_") }}_upper}"
  declare "SKIP_{{ '${' }}{{ tool | replace("-", "_") }}_upper}={{ '${' }}!{{ tool | replace("-", "_") }}_skip_env_var:-false}"

  ## Methods to skip {{ tool | replace("-", "_") }}
  if [[ "{{ '${' }}{{ tool | replace("-", "_") }}_skipped:-false}" == "argument" ]]; then
    _feedback WARNING "Skipping {{ tool | replace("-", "_") }} due to {{ '${' }}{{ tool | replace("-", "_") }}_skip_argument}"
    unset '{{ tool | replace("-", "_") }}_skipped'
  # If the "skip" environment variable was set to true, skip the security scan
  elif [[ "${!{{ tool | replace("-", "_") }}_skip_env_var,,}" == "true" ]]; then
    _feedback WARNING "Skipping {{ tool | replace("-", "_") }} due to the {{ '${' }}{{ tool | replace("-", "_") }}_skip_env_var} environment variable value"
  # If the security scan was already run successfully in an non-interactive
  # shell, don't run it again
  elif [[ -r "/tmp/{{ tool | replace("-", "_") }}_complete" ]]; then
    _feedback INFO "Skipping {{ tool | replace("-", "_") }} because it was already run on $(date -d @"$(cat /tmp/{{ tool | replace("-", "_") }}_complete)")"
  # Otherwise, run the security tool
  else
    {{ security_tools[tool].command }} &>/tmp/{{ tool | replace("-", "_") }}_output
    process_command_exit_status "${?}" "{{ tool | replace("-", "_") }}" "{{ security_tools[tool].description }}"
    return=${?}
    if [[ ${return:-1} != 0 ]]; then
      cat /tmp/{{ tool | replace("-", "_") }}_output
      if [[ "${LEARNING_MODE,,}" != "true" ]]; then
        return ${return}
      fi
    fi
  fi
  {%- endfor %}

  # Run the command per a PATH lookup, after any easy_infra specific arguments
  # are removed
  command "${FUNCNAME[0]}" "${arguments[@]}"
}
{% endmacro %}

{# Loop through each provided command (or aliases, if they are set) to be wrapped and make a single wrapper function for it -#}
{% for command in commands if commands[command]["security"] -%}
{% for alias in commands[command]["aliases"] -%}
{{ function(alias, commands[command]["security"], commands[command]["allow_filter"], commands[command]["version_argument"], commands[command]["validation"], commands[command]["security"]) }}
{% else %}
{{ function(command, commands[command]["security"], commands[command]["allow_filter"], commands[command]["version_argument"], commands[command]["validation"], commands[command]["security"]) }}
{% endfor %}
{%- endfor -%}

