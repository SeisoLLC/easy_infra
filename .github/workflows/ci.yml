---
name: "CI"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint
    runs-on: Ubuntu-20.04
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - uses: seisollc/goat@main
        with:
          disable_terrascan: true
          disable_mypy: true
  test:
    name: Test
    runs-on: Ubuntu-20.04
    strategy:
      matrix:
        stage: ["minimal", "aws", "az", "final"]
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Install the dependencies
        run: |
          python -m pip install --upgrade pipenv
          pipenv install --dev
          mkdir "${RUNNER_TEMP}/bin"
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b "${RUNNER_TEMP}/bin"
          chmod +x "${RUNNER_TEMP}/bin/syft"
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b "${RUNNER_TEMP}/bin"
          chmod +x "${RUNNER_TEMP}/bin/grype"
          echo "${RUNNER_TEMP}/bin" >> "${GITHUB_PATH}"
      - name: Build the image
        run: pipenv run invoke build --stage=${{ matrix.stage }}
      - name: Generate the SBOM
        run: pipenv run invoke sbom --stage=${{ matrix.stage }}
      - name: Run tests
        run: |
          find tests -mindepth 1 -type d -exec chmod o+w {} \;
          pipenv run invoke test --stage=${{ matrix.stage }}
      - name: Upload SBOM
        uses: actions/upload-artifact@v2
        with:
          name: SBOM - ${{ matrix.stage }}
          path: sbom.${{ matrix.stage }}.*.json
          if-no-files-found: error
      - name: Upload Vuln scan result
        uses: actions/upload-artifact@v2
        with:
          name: Vulns - ${{ matrix.stage }}
          path: vulns.${{ matrix.stage }}.*.json
          if-no-files-found: error
  distribute:
    name: Distribute
    runs-on: Ubuntu-20.04
    needs:
      - Lint
      - Test
    strategy:
      matrix:
        stage: ["minimal", "aws", "az", "final"]
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Install the dependencies
        run: |
          python -m pip install --upgrade pipenv
          pipenv install --dev
      - name: Build the image
        run: pipenv run invoke build --stage=${{ matrix.stage }}
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Publish the images to Docker Hub
        run: pipenv run invoke publish main --stage=${{ matrix.stage }}
      - name: Install cosign
        uses: sigstore/cosign-installer@main
      - name: Sign the image
        run:
          if [[ "${STAGE}" == "final" ]]; then
            tag="latest" ;
          else
            tag="latest-${STAGE}" ;
          fi ;
          DIGEST=$(docker manifest inspect --verbose "seiso/easy_infra:$tag" |
                   jq -r '.Descriptor.digest') ;
          echo -n "${COSIGN_PASSWORD}" |
          cosign sign --key cosign.key
            -a git_sha="${GITHUB_SHA}"
            -a tag="${tag}"
            "seiso/easy_infra@${DIGEST}"
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          STAGE: ${{ matrix.stage }}
